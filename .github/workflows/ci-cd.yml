name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run tests with coverage
      env:
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        HOUSECANARY_API_KEY: ${{ secrets.HOUSECANARY_API_KEY }}
        ATTOM_API_KEY: ${{ secrets.ATTOM_API_KEY }}
        ZILLOW_API_KEY: ${{ secrets.ZILLOW_API_KEY }}
        RENTCAST_API_KEY: ${{ secrets.RENTCAST_API_KEY }}
        CLEAR_CAPITAL_API_KEY: ${{ secrets.CLEAR_CAPITAL_API_KEY }}
      run: |
        pytest --cov=app tests/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: Run linters
      run: |
        flake8 app tests
        black --check app tests
        isort --check-only app tests

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security checks
      run: |
        bandit -r app
        safety check

  deploy:
    needs: [test, lint, security]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Deploy to production
      env:
        DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
        DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
        DEPLOY_KEY: ${{ secrets.DEPLOY_KEY }}
      run: |
        # Copy files to production server
        scp -i "$DEPLOY_KEY" -r app config requirements.txt deploy.sh $DEPLOY_USER@$DEPLOY_HOST:/app/
        
        # Run deployment script
        ssh -i "$DEPLOY_KEY" $DEPLOY_USER@$DEPLOY_HOST "cd /app && ./deploy.sh" 