{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../src/internal/hooks/use-table-interaction-metrics/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { useEffect, useRef } from 'react';\n\nimport { ComponentMetrics, PerformanceMetrics } from '../../analytics';\nimport { useFunnel } from '../../analytics/hooks/use-funnel';\nimport { JSONObject } from '../../analytics/interfaces';\nimport { useDOMAttribute } from '../use-dom-attribute';\nimport { useEffectOnUpdate } from '../use-effect-on-update';\nimport { useRandomId } from '../use-unique-id';\n\n/*\nIf the last user interaction is more than this time ago, it is not considered\nto be the cause of the current loading state.\n*/\nconst USER_ACTION_TIME_LIMIT = 1_000;\n\nexport interface UseTableInteractionMetricsProps {\n  elementRef: React.RefObject<HTMLElement>;\n  instanceIdentifier: string | undefined;\n  loading: boolean | undefined;\n  itemCount: number;\n  getComponentIdentifier: () => string | undefined;\n  getComponentConfiguration: () => JSONObject;\n  interactionMetadata: () => string;\n}\n\nexport function useTableInteractionMetrics({\n  elementRef,\n  itemCount,\n  instanceIdentifier,\n  getComponentIdentifier,\n  getComponentConfiguration,\n  loading = false,\n  interactionMetadata,\n}: UseTableInteractionMetricsProps) {\n  const taskInteractionId = useRandomId();\n  const tableInteractionAttributes = useDOMAttribute(\n    elementRef,\n    'data-analytics-task-interaction-id',\n    taskInteractionId\n  );\n  const { isInFunnel } = useFunnel();\n  const lastUserAction = useRef<{ name: string; time: number } | null>(null);\n  const capturedUserAction = useRef<string | null>(null);\n  const loadingStartTime = useRef<number | null>(null);\n\n  const metadata = useRef({ itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata });\n  metadata.current = { itemCount, getComponentIdentifier, getComponentConfiguration, interactionMetadata };\n\n  useEffect(() => {\n    if (isInFunnel) {\n      return;\n    }\n\n    ComponentMetrics.componentMounted({\n      taskInteractionId,\n      componentName: 'table',\n      componentConfiguration: metadata.current.getComponentConfiguration(),\n    });\n  }, [taskInteractionId, isInFunnel]);\n\n  useEffect(() => {\n    if (loading) {\n      loadingStartTime.current = performance.now();\n\n      if (lastUserAction.current && lastUserAction.current.time > performance.now() - USER_ACTION_TIME_LIMIT) {\n        capturedUserAction.current = lastUserAction.current.name;\n      } else {\n        capturedUserAction.current = null;\n      }\n    }\n  }, [loading]);\n\n  useEffectOnUpdate(() => {\n    if (!loading && loadingStartTime.current !== null) {\n      const loadingDuration = performance.now() - loadingStartTime.current;\n      loadingStartTime.current = null;\n\n      PerformanceMetrics.tableInteraction({\n        userAction: capturedUserAction.current ?? '',\n        interactionTime: Math.round(loadingDuration),\n        interactionMetadata: metadata.current.interactionMetadata(),\n        componentIdentifier: metadata.current.getComponentIdentifier(),\n        instanceIdentifier,\n        noOfResourcesInTable: metadata.current.itemCount,\n      });\n\n      if (!isInFunnel) {\n        ComponentMetrics.componentUpdated({\n          taskInteractionId,\n          componentName: 'table',\n          actionType: capturedUserAction.current ?? '',\n          componentConfiguration: metadata.current.getComponentConfiguration(),\n        });\n      }\n    }\n  }, [instanceIdentifier, loading, taskInteractionId, isInFunnel]);\n\n  return {\n    tableInteractionAttributes,\n    setLastUserAction: (name: string) => void (lastUserAction.current = { name, time: performance.now() }),\n  };\n}\n"]}