/// <reference types="react" />
import { Direction as WrapperDirection, DirectionState as WrapperDirectionState } from '../drag-handle-wrapper/interfaces';
export interface DragHandleProps {
    variant?: DragHandleProps.Variant;
    size?: DragHandleProps.Size;
    ariaLabel?: string;
    ariaDescribedby?: string;
    ariaValue?: DragHandleProps.AriaValue;
    disabled?: boolean;
    className?: string;
    onPointerDown?: React.PointerEventHandler;
    onKeyDown?: React.KeyboardEventHandler;
    tooltipText?: string;
    directions?: Partial<Record<DragHandleProps.Direction, DragHandleProps.DirectionState>>;
    onDirectionClick?: (direction: DragHandleProps.Direction) => void;
}
export declare namespace DragHandleProps {
    type Variant = 'drag-indicator' | 'resize-area' | 'resize-horizontal' | 'resize-vertical';
    type Direction = WrapperDirection;
    type DirectionState = WrapperDirectionState;
    type Size = 'small' | 'normal';
    interface AriaValue {
        valueMin: number;
        valueMax: number;
        valueNow: number;
    }
    interface Ref {
        focus(options?: FocusOptions): void;
    }
}
//# sourceMappingURL=interfaces.d.ts.map